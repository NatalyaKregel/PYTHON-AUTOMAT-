#from colorama import Fore, Back, Style # Импорт колорамы (для цветного текста в консоль)
#from colorama import init              # Импорт колорамы (для цветного текста в консоль)
#init()                                 # Импорт колорамы (для цветного текста в консоль)

from datetime import datetime # Импорт модуля даты и времени 
now = datetime.now()          # Импорт модуля даты и времени 

import os # Импортируем модуль "os" для работы с папками

print(datetime.strftime(datetime.now(), "%d.%m.%Y %H:%M")) # Вывод даты и времени на экран

path = 'C:\\Дневник by Ghasty\\' # Устанавливаем путь к папке для хранения записей

list_path = 'C:\\Дневник by Ghasty\\List.txt' # Устанавливаем путь к файлу для хранения инф. о записях

if not(os.path.exists(path)): # Если указанный путь path НЕ существует
    os.mkdir(path) # Создаем папку по этому пути
    print('Была создана папка для хранения записей') # Сообщаем пользователю о создании новой папки для хранения записей

else: # Если папка уже существует 
    print('Папка для хранения записей уже существует') # Сообщаем пользователю, что папка уже существует

if not(os.path.exists(list_path)): # Если указанный путь НЕ существует 
    list_file = open(list_path, 'a', encoding = 'utf-8')    
    print('Был создан файл для хранения информации о записях') 

else: # Если файл существует
    list_file = open(list_path, 'a', encoding = 'utf-8')
    print('Файл для хранения информации о записях уже существует')

print('--------------------------------------------------------')

#print(Back.GREEN) # Задний фон текста - зелёный
print('Добро пожаловать в "Мой дневник!"') # Приветственное сообщение: основное  

while True: # Главное меню 
    #print(Back.RED) # Задний фон текста - красный 
    print('Введите "x" чтобы выйти из программы \nили "info" для просмотра информации о программе') # Сообщаем о командах "x" и "info"

    #print(Back.YELLOW) # Задний фон текста - желтый 
    choice = input('Введите "+" чтобы добавить запись, \nили "-" чтобы просмотреть текущие\n') # Выбор пользователя: создание новой записи или просмотр текущих
    print() # "Эстетический" пробел 


    if choice in ['+','y','Y','yes','YES','Yes','Да','ДА','да', 'дА']: # Если ответ пользователя = "ДА"
        print('Добро пожаловать в меню добавления записей!') # Приветственное сообщение: меню добавления записей

        #print(Back.RED) # Задний фон текста - красный 
        print('Введите "x" чтобы выйти') # Сообщаем о команде "х" для выхода из меню        

        while True: # Меню добавления новых записей 
            print(datetime.strftime(datetime.now(), "%d.%m.%Y"))
            date_time = input('Хотите использовать текущую дату? (' + (datetime.strftime(datetime.now(), "%d.%m.%Y") + ') +/- \n')) # Выбор пользователя: Использовать ли текущую дату и время

            if date_time in ['+','y','Y','yes','YES','Yes','Да','ДА','да', 'дА']: # Если пользователь хочет использовать текущую дату
                file_date_time = datetime.strftime(datetime.now(), "%d.%m.%Y") # Узнаем текущ. дату в формате дд.мм.гггг. и записываем ее в переменную
                break # Прерывание цикла 

            elif date_time in ['-','n','N','no','NO','No','nO']: # Если пользователь не хочет использовать текущую дату
                file_date_time = input('Введите дату в формате "DD.MM.YYYY":\n') # Просим пользователя ввести дату самостоятельно
                break # Прерывание цикла

            elif date_time in ['x','X','q','Q','quit','QUIT','exit','EXIT','ext']: # Если пользователь хочет выйти 
                break # Прерывание цикла

            else: # Если введена неверная команда
                #print(Back.RED) # Задний фон текста - красный
                print('Введена неверная команда\n') # Сообщаем пользователю, что введена неверная команда 


        print('\nИспользуйте "Enter" для переноса строки\n') # Сообщение о том, что можно использовать "Enter" для переноса строки
        print('Для завершения записи, введите "x" на новой строке') # Сообщение о способе завершения записи

        file_name = (str(file_date_time) + '.txt') # Добавляем к названию файла расширение .txt
        flpath = path + '\\' + file_name # Задаем путь к создаваемому файлу
        file = open(flpath, 'a', encoding = 'utf-8') # Создаем файл 

        list_file.write(file_date_time)


        while True: # Этот цикл позволяет использовать клавишу "Enter" для переноса строки
            Text = input() # Ввод текста пользователем

            if not Text in ['x','X','q','Q','quit','QUIT','exit','EXIT','ext']: # Если пользователь НЕ хочет выйти

                file.write(Text) # Ввод текста в сам файл               
                file.write('\n') # Перенос строки при нажатии кнопки "Enter"

            else: # Иначе 
                break # Прерывание цикла

        file.close() # Закрытие файла   

    elif choice in ['-','n','N','no','NO','No','nO']: # Если ответ пользователя = НЕТ

        while True: # Меню просмотра текущих файлов 
            print(os.listdir(path)) # Находим все файлы в папке и выводим их названия на экран
            user_file_name = input('\nВведите название файла, который хотите открыть: ') # Пользователь вводит название искомого файла
            full_path = path + '\\' + user_file_name # Создаем путь к указанному файлу

            if not user_file_name in ['x','X','q','Q','quit','QUIT','exit','EXIT','ext']: # Если пользователь НЕ хочет выходить

                if os.path.exists(full_path): # Если указанный путь существует
                    f = open(full_path, 'r+', encoding='utf-8').read()  # Открываем файл для чтения
                    print('\n' + f + '\n') # Выводим содержимое файла на экран

                else: # Если указанный путь НЕ существует
                    print('Файла не существует') # Сообщаем пользователю о не существовании файла

            else: # Если пользователь хочет выйти
                break # Прерывание цикла

    elif choice in['info','INFO','Info','INfo','inf','INF','Information','information']: # Если пользователь вводит команду "info"
        print(''' Добро пожаловать в дневник, созданый Ghasty в "python 3.6".
это одна из самых первых программ написанных мной на python.

С помощью данной программы вы можете создавать страницы
личного дневника, а затем их просматривать.
Спасибо за то, что пользуетесь ей

v1.2

Введите "*" просмотра сведений об обновлении''')                                     #Выводим на экран информацию о програме

    elif choice == '*': # Если пользователь хочет просмотреть информацию о последнем обновлении
        print('Минорное обновление: \nДобавление описания ко ВСЕМ строчкам кода') # Вывод на экран информации о последнием обновлении 

    elif choice in ['x','X','q','Q','quit','QUIT','exit','EXIT','ext']: # Если пользователь хочет выйти 
        break # Прерывание цикла

    else: # Если введена неверная команда 
        print(Back.RED) # Задний фон текста - красный 
        print('\nВведена неверная команда, попробуйте еще раз:\n') # Сообщаем пользователю, что введена неверная команда